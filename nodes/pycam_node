#!/usr/bin/env python3

import sys
import traceback

import gi
import rospy
from pycam_lib.camera import CameraException
from pycam_lib.driver import Driver, DriverException
from pycam_lib.log import PyCamLog
from pycam_lib.publisher import PublisherException

gi.require_version('Gst', '1.0')
from gi.repository import GLib

LOG_LEVEL = rospy.DEBUG

def node_main():

    # Set up logging
    if rospy.has_param('/pycam_node/loglevel'):
        loglevel = rospy.get_param('/pycam_node/loglevel')
    else:
        loglevel = LOG_LEVEL

    # Initialize node
    rospy.init_node('pycam', log_level=loglevel)
    PyCamLog.debug("Node Init Started")

    try:
        # Initialize driver
        driver = Driver()
        PyCamLog.debug("Node Init Finished")

        # Blocks until driver finishes
        driver.run()

        return 0

    except (DriverException, CameraException, PublisherException, GLib.Error) as e:
        PyCamLog.fatal(str(e))

    except Exception as e:
        PyCamLog.fatal(str(e))
        print(traceback.format_exc())

    return 1

if __name__ == '__main__':
    sys.exit(node_main())
